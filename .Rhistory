ggplot(df, aes(x = acesso_eletricidade, y = taxa_populacao_acesso_saneamento)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Distância",
y = "Tempo",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$taxa_populacao_acesso_saneamento))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = taxa_populacao_acesso_saneamento)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Distância",
y = "Tempo",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$taxa_alfabetizacao_adultos))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = taxa_alfabetizacao_adultos)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Distância",
y = "Tempo",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$taxa_alfabetizacao_adultos))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = taxa_alfabetizacao_adultos)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$taxa_alfabetizacao_adultos))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = acesso_eletricidade ~ taxa_alfabetizacao_adultos,
data = df)
modelo
#Observando os parâmetros do modelo_tempodist
summary(modelo)
export_summs(modelo, scale = F, digits = 4)
library(jtools)
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = acesso_eletricidade ~ taxa_alfabetizacao_adultos,
data = df)
#Observando os parâmetros do modelo_tempodist
summary(modelo)
export_summs(modelo, scale = F, digits = 4)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$taxa_alfabetizacao_adultos))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$expectativa_vida_geral))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
cor(df$acesso_eletricidade, df$expectativa_vida_geral))^2)
cor(df$acesso_eletricidade, df$expectativa_vida_geral))^2),4)
cor(df$acesso_eletricidade, df$expectativa_vida_geral))^2),4)
cor(df$acesso_eletricidade, df$expectativa_vida_geral)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$expectativa_vida_geral, na.rm = T))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$expectativa_vida_geral, na.rm = T))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$expectativa_vida_geral, use = "everything"))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
ggplot(df, aes(x = acesso_eletricidade, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$acesso_eletricidade, df$expectativa_vida_geral, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = acesso_eletricidade ~ expectativa_vida_geral,
data = df)
#Observando os parâmetros do modelo_tempodist
summary(modelo)
export_summs(modelo, scale = F, digits = 4)
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
library(equatiomatic)
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
tempodist$yhat <- modelo_tempodist$fitted.values
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
modelo$yhat <- modelo$fitted.values
modelo$erro <- modelo$residuals
#Visualizando a base de dados com as variáveis yhat e erro
tempodist %>%
select(tempo, distancia, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando a base de dados com as variáveis yhat e erro
df %>%
select(tempo, distancia, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando a base de dados com as variáveis yhat e erro
modelo %>%
select(tempo, distancia, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Fazendo predições
predict(object = modelo,
data.frame(expectativa_vida_geral = 25))
#Fazendo predições
predict(object = modelo,
data.frame(expectativa_vida_geral = 75))
#Fazendo predições
predict(object = modelo,
data.frame(expectativa_vida_geral = 70))
#Caso se queira obter as predições com os IC
predict(object = modelo,
data.frame(expectativa_vida_geral = 25),
interval = "confidence", level = 0.95)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
plot(df$taxa_mortalidade_infantil, df$expectativa_vida_geral)
abline(lm(df$taxa_mortalidade_infantil ~ df$expectativa_vida_geral, data=df), col="blue")
ggplot(df, aes(x = taxa_mortalidade_infantil, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"),
method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade",
y = "Alfabetização",
title = paste("R²:",
round(((cor(df$taxa_mortalidade_infantil, df$expectativa_vida_geral, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:",
values = "grey50") +
theme_classic()
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
modelo$yhat <- modelo$fitted.values
modelo$erro <- modelo$residuals
#Visualizando a base de dados com as variáveis yhat e erro
modelo %>%
select(tempo, distancia, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
df$yhat <- modelo$fitted.values
df$erro <- modelo$residuals
################################################################################
#                             REGRESSÃO LINEAR SIMPLES                         #
################################################################################
df <- read.csv("data/world_data.csv")
df %>% head() %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = taxa_mortalidade_infantil, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Eletricidade", y = "Alfabetização", title = paste("R²:",
round(((cor(df$taxa_mortalidade_infantil, df$expectativa_vida_geral, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = taxa_mortalidade_infantil, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$taxa_mortalidade_infantil, df$expectativa_vida_geral, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = taxa_mortalidade_infantil ~ expectativa_vida_geral,
data = df)
#Observando os parâmetros do modelo_tempodist
summary(modelo)
export_summs(modelo, scale = F, digits = 4)
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = taxa_mortalidade_infantil, y = expectativa_vida_geral)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$taxa_mortalidade_infantil, df$expectativa_vida_geral, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                             REGRESSÃO LINEAR SIMPLES                         #
################################################################################
df <- read.csv("data/housing.csv")
df
View(df)
View(df)
View(df)
################################################################################
#                             REGRESSÃO LINEAR SIMPLES                         #
################################################################################
df <- read.csv("data/housing.csv", sep=",")
View(df)
################################################################################
#                             REGRESSÃO LINEAR SIMPLES                         #
################################################################################
df <- read.csv("data/house_price.csv", sep=",")
View(df)
df %>% head() %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = bedrooms, y = price)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$bedrooms, df$price, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = sqft_living, y = price)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$sqft_living, df$price, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = yr_built, y = price)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$sqft_living, df$price, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                             REGRESSÃO LINEAR SIMPLES                         #
################################################################################
df <- read.csv("data/study_performance.csv", sep=",")
df
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = math_score, y = reading_score)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$math_score, df$reading_score, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = writing_score, y = reading_score)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$writing_score, df$reading_score, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = writing_score, y = reading_score)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$writing_score, df$reading_score, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = writing_score ~ reading_score, data = df)
#Observando os parâmetros do modelo_tempodist
summary(modelo)
export_summs(modelo, scale = F, digits = 4)
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
################################################################################
#                            GRÁFICO DE DISPERSÃO                              #
################################################################################
df %>%
ggplot(aes(x = writing_score, y = reading_score)) +
geom_point(color = "#39568CFF", size = 2.5) +
geom_smooth(aes(color = "Fitted Values"), method = "lm", formula = y ~ x, se = F, size = 2) +
labs(x = "Mortalidade Infantil", y = "Expectativa de Vida", title = paste("R²:",
round(((cor(df$writing_score, df$reading_score, use = "complete.obs"))^2),4))) +
scale_color_manual("Legenda:", values = "grey50") +
theme_classic()
################################################################################
#           MODELAGEM DE UMA REGRESSÃO LINEAR SIMPLES PARA O EXEMPLO 01        #
################################################################################
#Estimando o modelo
modelo <- lm(formula = writing_score ~ reading_score, data = df)
#Observando os parâmetros do modelo_tempodist
summary(modelo)
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
modelo$yhat <- modelo$fitted.values
modelo$erro <- modelo$residuals
#Visualizando a base de dados com as variáveis yhat e erro
modelo %>%
select(tempo, distancia, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Salvando fitted values (variável yhat) e residuals (variável erro) no dataset
df$yhat <- modelo$fitted.values
df$erro <- modelo$residuals
#Visualizando a base de dados com as variáveis yhat e erro
df %>%
select(reading_score, writing_score, yhat, erro) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 70))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 85))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 90))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 10))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 15))
#Visualização do modelo no ambiente Viewer
#função 'extract_eq' do pacote 'equatiomatic'
extract_eq(modelo, use_coefs = T) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 28)
nota_escrita <- -0.67 + 0.99*nota_leitura
# Fórmula regressão linear
# y = a + bx
# a: intercepto
# b: coeficiente angular
nota_leitura <- 70
nota_escrita <- -0.67 + 0.99*nota_leitura
nota_escrita
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 15))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = 70))
#Fazendo predições
predict(object = modelo, data.frame(reading_score = nota_leitura))
# Fórmula regressão linear
# y = a + bx
# a: intercepto
# b: coeficiente angular
nota_leitura <- 70
nota_escrita <- -0.67 + 0.99*nota_leitura
nota_escrita
# Fórmula regressão linear
# y = a + bx
# a: intercepto
# b: coeficiente angular
nota_leitura <- 73
nota_escrita <- -0.67 + 0.99*nota_leitura
nota_escrita
#Fazendo predições
predict(object = modelo, data.frame(reading_score = nota_leitura))
